/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package transactionlog;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Record\",\"namespace\":\"transactionlog\",\"fields\":[{\"name\":\"database\",\"type\":\"string\"},{\"name\":\"table\",\"type\":\"string\"},{\"name\":\"rdbmsType\",\"type\":[\"string\",\"null\"]},{\"name\":\"eventType\",\"type\":{\"type\":\"enum\",\"name\":\"EventTypeTransactionLog\",\"symbols\":[\"WRITE_ROWS\",\"DELETE_ROWS\",\"UPDATE_ROWS\"]}},{\"name\":\"totalCountTransactionEvent\",\"type\":\"int\"},{\"name\":\"currentEventIndex\",\"type\":\"int\"},{\"name\":\"lastPositionNumber\",\"type\":[\"long\",\"null\"]},{\"name\":\"logFileName\",\"type\":[\"string\",\"null\"]},{\"name\":\"transactionSequenceNumber\",\"type\":[\"long\",\"null\"]},{\"name\":\"timestampOperation\",\"type\":\"long\"},{\"name\":\"transactionId\",\"type\":\"string\"},{\"name\":\"afterValue\",\"type\":{\"type\":\"array\",\"items\":[\"string\",\"null\"]}},{\"name\":\"beforeValue\",\"type\":{\"type\":\"array\",\"items\":[\"string\",\"null\"]}},{\"name\":\"columnName\",\"type\":{\"type\":\"array\",\"items\":[\"string\",\"null\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence database;
  @Deprecated public java.lang.CharSequence table;
  @Deprecated public java.lang.CharSequence rdbmsType;
  @Deprecated public transactionlog.EventTypeTransactionLog eventType;
  @Deprecated public int totalCountTransactionEvent;
  @Deprecated public int currentEventIndex;
  @Deprecated public java.lang.Long lastPositionNumber;
  @Deprecated public java.lang.CharSequence logFileName;
  @Deprecated public java.lang.Long transactionSequenceNumber;
  @Deprecated public long timestampOperation;
  @Deprecated public java.lang.CharSequence transactionId;
  @Deprecated public java.util.List<java.lang.CharSequence> afterValue;
  @Deprecated public java.util.List<java.lang.CharSequence> beforeValue;
  @Deprecated public java.util.List<java.lang.CharSequence> columnName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Record() {}

  /**
   * All-args constructor.
   */
  public Record(java.lang.CharSequence database, java.lang.CharSequence table, java.lang.CharSequence rdbmsType, transactionlog.EventTypeTransactionLog eventType, java.lang.Integer totalCountTransactionEvent, java.lang.Integer currentEventIndex, java.lang.Long lastPositionNumber, java.lang.CharSequence logFileName, java.lang.Long transactionSequenceNumber, java.lang.Long timestampOperation, java.lang.CharSequence transactionId, java.util.List<java.lang.CharSequence> afterValue, java.util.List<java.lang.CharSequence> beforeValue, java.util.List<java.lang.CharSequence> columnName) {
    this.database = database;
    this.table = table;
    this.rdbmsType = rdbmsType;
    this.eventType = eventType;
    this.totalCountTransactionEvent = totalCountTransactionEvent;
    this.currentEventIndex = currentEventIndex;
    this.lastPositionNumber = lastPositionNumber;
    this.logFileName = logFileName;
    this.transactionSequenceNumber = transactionSequenceNumber;
    this.timestampOperation = timestampOperation;
    this.transactionId = transactionId;
    this.afterValue = afterValue;
    this.beforeValue = beforeValue;
    this.columnName = columnName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return database;
    case 1: return table;
    case 2: return rdbmsType;
    case 3: return eventType;
    case 4: return totalCountTransactionEvent;
    case 5: return currentEventIndex;
    case 6: return lastPositionNumber;
    case 7: return logFileName;
    case 8: return transactionSequenceNumber;
    case 9: return timestampOperation;
    case 10: return transactionId;
    case 11: return afterValue;
    case 12: return beforeValue;
    case 13: return columnName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: database = (java.lang.CharSequence)value$; break;
    case 1: table = (java.lang.CharSequence)value$; break;
    case 2: rdbmsType = (java.lang.CharSequence)value$; break;
    case 3: eventType = (transactionlog.EventTypeTransactionLog)value$; break;
    case 4: totalCountTransactionEvent = (java.lang.Integer)value$; break;
    case 5: currentEventIndex = (java.lang.Integer)value$; break;
    case 6: lastPositionNumber = (java.lang.Long)value$; break;
    case 7: logFileName = (java.lang.CharSequence)value$; break;
    case 8: transactionSequenceNumber = (java.lang.Long)value$; break;
    case 9: timestampOperation = (java.lang.Long)value$; break;
    case 10: transactionId = (java.lang.CharSequence)value$; break;
    case 11: afterValue = (java.util.List<java.lang.CharSequence>)value$; break;
    case 12: beforeValue = (java.util.List<java.lang.CharSequence>)value$; break;
    case 13: columnName = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'database' field.
   */
  public java.lang.CharSequence getDatabase() {
    return database;
  }

  /**
   * Sets the value of the 'database' field.
   * @param value the value to set.
   */
  public void setDatabase(java.lang.CharSequence value) {
    this.database = value;
  }

  /**
   * Gets the value of the 'table' field.
   */
  public java.lang.CharSequence getTable() {
    return table;
  }

  /**
   * Sets the value of the 'table' field.
   * @param value the value to set.
   */
  public void setTable(java.lang.CharSequence value) {
    this.table = value;
  }

  /**
   * Gets the value of the 'rdbmsType' field.
   */
  public java.lang.CharSequence getRdbmsType() {
    return rdbmsType;
  }

  /**
   * Sets the value of the 'rdbmsType' field.
   * @param value the value to set.
   */
  public void setRdbmsType(java.lang.CharSequence value) {
    this.rdbmsType = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   */
  public transactionlog.EventTypeTransactionLog getEventType() {
    return eventType;
  }

  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(transactionlog.EventTypeTransactionLog value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'totalCountTransactionEvent' field.
   */
  public java.lang.Integer getTotalCountTransactionEvent() {
    return totalCountTransactionEvent;
  }

  /**
   * Sets the value of the 'totalCountTransactionEvent' field.
   * @param value the value to set.
   */
  public void setTotalCountTransactionEvent(java.lang.Integer value) {
    this.totalCountTransactionEvent = value;
  }

  /**
   * Gets the value of the 'currentEventIndex' field.
   */
  public java.lang.Integer getCurrentEventIndex() {
    return currentEventIndex;
  }

  /**
   * Sets the value of the 'currentEventIndex' field.
   * @param value the value to set.
   */
  public void setCurrentEventIndex(java.lang.Integer value) {
    this.currentEventIndex = value;
  }

  /**
   * Gets the value of the 'lastPositionNumber' field.
   */
  public java.lang.Long getLastPositionNumber() {
    return lastPositionNumber;
  }

  /**
   * Sets the value of the 'lastPositionNumber' field.
   * @param value the value to set.
   */
  public void setLastPositionNumber(java.lang.Long value) {
    this.lastPositionNumber = value;
  }

  /**
   * Gets the value of the 'logFileName' field.
   */
  public java.lang.CharSequence getLogFileName() {
    return logFileName;
  }

  /**
   * Sets the value of the 'logFileName' field.
   * @param value the value to set.
   */
  public void setLogFileName(java.lang.CharSequence value) {
    this.logFileName = value;
  }

  /**
   * Gets the value of the 'transactionSequenceNumber' field.
   */
  public java.lang.Long getTransactionSequenceNumber() {
    return transactionSequenceNumber;
  }

  /**
   * Sets the value of the 'transactionSequenceNumber' field.
   * @param value the value to set.
   */
  public void setTransactionSequenceNumber(java.lang.Long value) {
    this.transactionSequenceNumber = value;
  }

  /**
   * Gets the value of the 'timestampOperation' field.
   */
  public java.lang.Long getTimestampOperation() {
    return timestampOperation;
  }

  /**
   * Sets the value of the 'timestampOperation' field.
   * @param value the value to set.
   */
  public void setTimestampOperation(java.lang.Long value) {
    this.timestampOperation = value;
  }

  /**
   * Gets the value of the 'transactionId' field.
   */
  public java.lang.CharSequence getTransactionId() {
    return transactionId;
  }

  /**
   * Sets the value of the 'transactionId' field.
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.CharSequence value) {
    this.transactionId = value;
  }

  /**
   * Gets the value of the 'afterValue' field.
   */
  public java.util.List<java.lang.CharSequence> getAfterValue() {
    return afterValue;
  }

  /**
   * Sets the value of the 'afterValue' field.
   * @param value the value to set.
   */
  public void setAfterValue(java.util.List<java.lang.CharSequence> value) {
    this.afterValue = value;
  }

  /**
   * Gets the value of the 'beforeValue' field.
   */
  public java.util.List<java.lang.CharSequence> getBeforeValue() {
    return beforeValue;
  }

  /**
   * Sets the value of the 'beforeValue' field.
   * @param value the value to set.
   */
  public void setBeforeValue(java.util.List<java.lang.CharSequence> value) {
    this.beforeValue = value;
  }

  /**
   * Gets the value of the 'columnName' field.
   */
  public java.util.List<java.lang.CharSequence> getColumnName() {
    return columnName;
  }

  /**
   * Sets the value of the 'columnName' field.
   * @param value the value to set.
   */
  public void setColumnName(java.util.List<java.lang.CharSequence> value) {
    this.columnName = value;
  }

  /** Creates a new Record RecordBuilder */
  public static transactionlog.Record.Builder newBuilder() {
    return new transactionlog.Record.Builder();
  }
  
  /** Creates a new Record RecordBuilder by copying an existing Builder */
  public static transactionlog.Record.Builder newBuilder(transactionlog.Record.Builder other) {
    return new transactionlog.Record.Builder(other);
  }
  
  /** Creates a new Record RecordBuilder by copying an existing Record instance */
  public static transactionlog.Record.Builder newBuilder(transactionlog.Record other) {
    return new transactionlog.Record.Builder(other);
  }
  
  /**
   * RecordBuilder for Record instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Record>
    implements org.apache.avro.data.RecordBuilder<Record> {

    private java.lang.CharSequence database;
    private java.lang.CharSequence table;
    private java.lang.CharSequence rdbmsType;
    private transactionlog.EventTypeTransactionLog eventType;
    private int totalCountTransactionEvent;
    private int currentEventIndex;
    private java.lang.Long lastPositionNumber;
    private java.lang.CharSequence logFileName;
    private java.lang.Long transactionSequenceNumber;
    private long timestampOperation;
    private java.lang.CharSequence transactionId;
    private java.util.List<java.lang.CharSequence> afterValue;
    private java.util.List<java.lang.CharSequence> beforeValue;
    private java.util.List<java.lang.CharSequence> columnName;

    /** Creates a new Builder */
    private Builder() {
      super(transactionlog.Record.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(transactionlog.Record.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.database)) {
        this.database = data().deepCopy(fields()[0].schema(), other.database);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.table)) {
        this.table = data().deepCopy(fields()[1].schema(), other.table);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rdbmsType)) {
        this.rdbmsType = data().deepCopy(fields()[2].schema(), other.rdbmsType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventType)) {
        this.eventType = data().deepCopy(fields()[3].schema(), other.eventType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalCountTransactionEvent)) {
        this.totalCountTransactionEvent = data().deepCopy(fields()[4].schema(), other.totalCountTransactionEvent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currentEventIndex)) {
        this.currentEventIndex = data().deepCopy(fields()[5].schema(), other.currentEventIndex);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lastPositionNumber)) {
        this.lastPositionNumber = data().deepCopy(fields()[6].schema(), other.lastPositionNumber);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.logFileName)) {
        this.logFileName = data().deepCopy(fields()[7].schema(), other.logFileName);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.transactionSequenceNumber)) {
        this.transactionSequenceNumber = data().deepCopy(fields()[8].schema(), other.transactionSequenceNumber);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.timestampOperation)) {
        this.timestampOperation = data().deepCopy(fields()[9].schema(), other.timestampOperation);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[10].schema(), other.transactionId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.afterValue)) {
        this.afterValue = data().deepCopy(fields()[11].schema(), other.afterValue);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.beforeValue)) {
        this.beforeValue = data().deepCopy(fields()[12].schema(), other.beforeValue);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.columnName)) {
        this.columnName = data().deepCopy(fields()[13].schema(), other.columnName);
        fieldSetFlags()[13] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Record instance */
    private Builder(transactionlog.Record other) {
            super(transactionlog.Record.SCHEMA$);
      if (isValidValue(fields()[0], other.database)) {
        this.database = data().deepCopy(fields()[0].schema(), other.database);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.table)) {
        this.table = data().deepCopy(fields()[1].schema(), other.table);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.rdbmsType)) {
        this.rdbmsType = data().deepCopy(fields()[2].schema(), other.rdbmsType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventType)) {
        this.eventType = data().deepCopy(fields()[3].schema(), other.eventType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.totalCountTransactionEvent)) {
        this.totalCountTransactionEvent = data().deepCopy(fields()[4].schema(), other.totalCountTransactionEvent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.currentEventIndex)) {
        this.currentEventIndex = data().deepCopy(fields()[5].schema(), other.currentEventIndex);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lastPositionNumber)) {
        this.lastPositionNumber = data().deepCopy(fields()[6].schema(), other.lastPositionNumber);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.logFileName)) {
        this.logFileName = data().deepCopy(fields()[7].schema(), other.logFileName);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.transactionSequenceNumber)) {
        this.transactionSequenceNumber = data().deepCopy(fields()[8].schema(), other.transactionSequenceNumber);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.timestampOperation)) {
        this.timestampOperation = data().deepCopy(fields()[9].schema(), other.timestampOperation);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.transactionId)) {
        this.transactionId = data().deepCopy(fields()[10].schema(), other.transactionId);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.afterValue)) {
        this.afterValue = data().deepCopy(fields()[11].schema(), other.afterValue);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.beforeValue)) {
        this.beforeValue = data().deepCopy(fields()[12].schema(), other.beforeValue);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.columnName)) {
        this.columnName = data().deepCopy(fields()[13].schema(), other.columnName);
        fieldSetFlags()[13] = true;
      }
    }

    /** Gets the value of the 'database' field */
    public java.lang.CharSequence getDatabase() {
      return database;
    }
    
    /** Sets the value of the 'database' field */
    public transactionlog.Record.Builder setDatabase(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.database = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'database' field has been set */
    public boolean hasDatabase() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'database' field */
    public transactionlog.Record.Builder clearDatabase() {
      database = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'table' field */
    public java.lang.CharSequence getTable() {
      return table;
    }
    
    /** Sets the value of the 'table' field */
    public transactionlog.Record.Builder setTable(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.table = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'table' field has been set */
    public boolean hasTable() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'table' field */
    public transactionlog.Record.Builder clearTable() {
      table = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'rdbmsType' field */
    public java.lang.CharSequence getRdbmsType() {
      return rdbmsType;
    }
    
    /** Sets the value of the 'rdbmsType' field */
    public transactionlog.Record.Builder setRdbmsType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.rdbmsType = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'rdbmsType' field has been set */
    public boolean hasRdbmsType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'rdbmsType' field */
    public transactionlog.Record.Builder clearRdbmsType() {
      rdbmsType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'eventType' field */
    public transactionlog.EventTypeTransactionLog getEventType() {
      return eventType;
    }
    
    /** Sets the value of the 'eventType' field */
    public transactionlog.Record.Builder setEventType(transactionlog.EventTypeTransactionLog value) {
      validate(fields()[3], value);
      this.eventType = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'eventType' field has been set */
    public boolean hasEventType() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'eventType' field */
    public transactionlog.Record.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'totalCountTransactionEvent' field */
    public java.lang.Integer getTotalCountTransactionEvent() {
      return totalCountTransactionEvent;
    }
    
    /** Sets the value of the 'totalCountTransactionEvent' field */
    public transactionlog.Record.Builder setTotalCountTransactionEvent(int value) {
      validate(fields()[4], value);
      this.totalCountTransactionEvent = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'totalCountTransactionEvent' field has been set */
    public boolean hasTotalCountTransactionEvent() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'totalCountTransactionEvent' field */
    public transactionlog.Record.Builder clearTotalCountTransactionEvent() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'currentEventIndex' field */
    public java.lang.Integer getCurrentEventIndex() {
      return currentEventIndex;
    }
    
    /** Sets the value of the 'currentEventIndex' field */
    public transactionlog.Record.Builder setCurrentEventIndex(int value) {
      validate(fields()[5], value);
      this.currentEventIndex = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'currentEventIndex' field has been set */
    public boolean hasCurrentEventIndex() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'currentEventIndex' field */
    public transactionlog.Record.Builder clearCurrentEventIndex() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'lastPositionNumber' field */
    public java.lang.Long getLastPositionNumber() {
      return lastPositionNumber;
    }
    
    /** Sets the value of the 'lastPositionNumber' field */
    public transactionlog.Record.Builder setLastPositionNumber(java.lang.Long value) {
      validate(fields()[6], value);
      this.lastPositionNumber = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'lastPositionNumber' field has been set */
    public boolean hasLastPositionNumber() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'lastPositionNumber' field */
    public transactionlog.Record.Builder clearLastPositionNumber() {
      lastPositionNumber = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'logFileName' field */
    public java.lang.CharSequence getLogFileName() {
      return logFileName;
    }
    
    /** Sets the value of the 'logFileName' field */
    public transactionlog.Record.Builder setLogFileName(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.logFileName = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'logFileName' field has been set */
    public boolean hasLogFileName() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'logFileName' field */
    public transactionlog.Record.Builder clearLogFileName() {
      logFileName = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'transactionSequenceNumber' field */
    public java.lang.Long getTransactionSequenceNumber() {
      return transactionSequenceNumber;
    }
    
    /** Sets the value of the 'transactionSequenceNumber' field */
    public transactionlog.Record.Builder setTransactionSequenceNumber(java.lang.Long value) {
      validate(fields()[8], value);
      this.transactionSequenceNumber = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'transactionSequenceNumber' field has been set */
    public boolean hasTransactionSequenceNumber() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'transactionSequenceNumber' field */
    public transactionlog.Record.Builder clearTransactionSequenceNumber() {
      transactionSequenceNumber = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'timestampOperation' field */
    public java.lang.Long getTimestampOperation() {
      return timestampOperation;
    }
    
    /** Sets the value of the 'timestampOperation' field */
    public transactionlog.Record.Builder setTimestampOperation(long value) {
      validate(fields()[9], value);
      this.timestampOperation = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'timestampOperation' field has been set */
    public boolean hasTimestampOperation() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'timestampOperation' field */
    public transactionlog.Record.Builder clearTimestampOperation() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'transactionId' field */
    public java.lang.CharSequence getTransactionId() {
      return transactionId;
    }
    
    /** Sets the value of the 'transactionId' field */
    public transactionlog.Record.Builder setTransactionId(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.transactionId = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'transactionId' field has been set */
    public boolean hasTransactionId() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'transactionId' field */
    public transactionlog.Record.Builder clearTransactionId() {
      transactionId = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'afterValue' field */
    public java.util.List<java.lang.CharSequence> getAfterValue() {
      return afterValue;
    }
    
    /** Sets the value of the 'afterValue' field */
    public transactionlog.Record.Builder setAfterValue(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[11], value);
      this.afterValue = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'afterValue' field has been set */
    public boolean hasAfterValue() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'afterValue' field */
    public transactionlog.Record.Builder clearAfterValue() {
      afterValue = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'beforeValue' field */
    public java.util.List<java.lang.CharSequence> getBeforeValue() {
      return beforeValue;
    }
    
    /** Sets the value of the 'beforeValue' field */
    public transactionlog.Record.Builder setBeforeValue(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[12], value);
      this.beforeValue = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'beforeValue' field has been set */
    public boolean hasBeforeValue() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'beforeValue' field */
    public transactionlog.Record.Builder clearBeforeValue() {
      beforeValue = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'columnName' field */
    public java.util.List<java.lang.CharSequence> getColumnName() {
      return columnName;
    }
    
    /** Sets the value of the 'columnName' field */
    public transactionlog.Record.Builder setColumnName(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[13], value);
      this.columnName = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'columnName' field has been set */
    public boolean hasColumnName() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'columnName' field */
    public transactionlog.Record.Builder clearColumnName() {
      columnName = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    public Record build() {
      try {
        Record record = new Record();
        record.database = fieldSetFlags()[0] ? this.database : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.table = fieldSetFlags()[1] ? this.table : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.rdbmsType = fieldSetFlags()[2] ? this.rdbmsType : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.eventType = fieldSetFlags()[3] ? this.eventType : (transactionlog.EventTypeTransactionLog) defaultValue(fields()[3]);
        record.totalCountTransactionEvent = fieldSetFlags()[4] ? this.totalCountTransactionEvent : (java.lang.Integer) defaultValue(fields()[4]);
        record.currentEventIndex = fieldSetFlags()[5] ? this.currentEventIndex : (java.lang.Integer) defaultValue(fields()[5]);
        record.lastPositionNumber = fieldSetFlags()[6] ? this.lastPositionNumber : (java.lang.Long) defaultValue(fields()[6]);
        record.logFileName = fieldSetFlags()[7] ? this.logFileName : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.transactionSequenceNumber = fieldSetFlags()[8] ? this.transactionSequenceNumber : (java.lang.Long) defaultValue(fields()[8]);
        record.timestampOperation = fieldSetFlags()[9] ? this.timestampOperation : (java.lang.Long) defaultValue(fields()[9]);
        record.transactionId = fieldSetFlags()[10] ? this.transactionId : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.afterValue = fieldSetFlags()[11] ? this.afterValue : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[11]);
        record.beforeValue = fieldSetFlags()[12] ? this.beforeValue : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[12]);
        record.columnName = fieldSetFlags()[13] ? this.columnName : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[13]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
